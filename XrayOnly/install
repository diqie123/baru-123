#!/bin/bash
# //====================================================
# //	System Request:Debian 9+/Ubuntu 18.04+/20+
# //	Author:	bhoikfostyahya
# //	Dscription: Xray Menu Management
# //	email: admin@bhoikfostyahya.com
# //    telegram: https://t.me/bhoikfost_yahya
# //====================================================

# // FONT color configuration | BHOIKFOST YAHYA AUTOSCRIPT
Green="\e[92;1m"
RED="\033[31m"
YELLOW="\033[33m"
BLUE="\033[36m"
FONT="\033[0m"
GREENBG="\033[42;37m"
REDBG="\033[41;37m"
OK="${Green}--->${FONT}"
ERROR="${RED}[ERROR]${FONT}"
GRAY="\e[1;30m"
NC='\e[0m'

# // configuration GET | BHOIKFOST YAHYA AUTOSCRIPT
TIMES="10"
NAMES=$(whoami)
IMP="wget -q -O"
CHATID="-1001707197017"
CHATID2="-1001665984276"
LOCAL_DATE="/usr/bin/"
MYIP=$(wget -qO- ipinfo.io/ip)
CITY=$(curl -s ipinfo.io/city)
TIME=$(date +'%Y-%m-%d %H:%M:%S')
RAMMS=$(free -m | awk 'NR==2 {print $2}')
KEY="5432820291:AAFvWwdhQSb96UEVCv4XrZDHD_n27BSbtcs"
KEY2="5919349861:AAFPlWkQPkVS9eynngn6lAYPDbbvz6oOF94"
URL="https://api.telegram.org/bot$KEY/sendMessage"
URL2="https://api.telegram.org/bot$KEY2/sendMessage"
GITHUB_CMD="https://github.com/FighterTunnel/tunnel/raw/"
OS=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')

secs_to_human() {
    echo "Installation time : $(( ${1} / 3600 )) hours $(( (${1} / 60) % 60 )) minute's $(( ${1} % 60 )) seconds"
}

start=$(date +%s)
ln -fs /usr/share/zoneinfo/Asia/Jakarta /etc/localtime 
TIME=$(date +'%Y-%m-%d %H:%M:%S')
function print_ok() {
    echo -e "${OK} ${BLUE} $1 ${FONT}"
}

function print_error() {
    echo -e "${ERROR} ${REDBG} $1 ${FONT}"
}

function is_root() {
    if [[ 0 == "$UID" ]]; then
        print_ok "Root user Start installation process"
    else
        print_error "The current user is not the root user, please switch to the root user and run the script again"
        # // exit 1
    fi
    
}

judge() {
    if [[ 0 -eq $? ]]; then
        print_ok "$1 Complete... | thx to ${YELLOW}bhoikfostyahya${FONT}"
        sleep 1
    else
        print_error "$1 Fail... | thx to ${YELLOW}bhoikfostyahya${FONT}"
        # // exit 1
    fi
    
}

domain="cat /etc/xray/domain"
cloudflare() {
    DOMEN="bhoikfostyahya.my.id"
    sub=$(tr </dev/urandom -dc a-z0-9 | head -c5)
    domain="${sub}.bhoikfostyahya.my.id"
    echo -e "${domain}" >/etc/xray/domain
    CF_ID="mamangyha@gmail.com"
    CF_KEY="c77a019ab84c1b91908d9a66d0a808ed010e2"
    set -euo pipefail
    IP=$(wget -qO- ipinfo.io/ip)
    print_ok "Updating DNS for ${RED}${domain}${FONT}"
    ZONE=$(curl -sLX GET "https://api.cloudflare.com/client/v4/zones?name=${DOMEN}&status=active" \
        -H "X-Auth-Email: ${CF_ID}" \
        -H "X-Auth-Key: ${CF_KEY}" \
    -H "Content-Type: application/json" | jq -r .result[0].id)
    
    RECORD=$(curl -sLX GET "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records?name=${domain}" \
        -H "X-Auth-Email: ${CF_ID}" \
        -H "X-Auth-Key: ${CF_KEY}" \
    -H "Content-Type: application/json" | jq -r .result[0].id)
    
    if [[ "${#RECORD}" -le 10 ]]; then
        RECORD=$(curl -sLX POST "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records" \
            -H "X-Auth-Email: ${CF_ID}" \
            -H "X-Auth-Key: ${CF_KEY}" \
            -H "Content-Type: application/json" \
        --data '{"type":"A","name":"'${domain}'","content":"'${IP}'","proxied":false}' | jq -r .result.id)
    fi
    
    RESULT=$(curl -sLX PUT "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records/${RECORD}" \
        -H "X-Auth-Email: ${CF_ID}" \
        -H "X-Auth-Key: ${CF_KEY}" \
        -H "Content-Type: application/json" \
    --data '{"type":"A","name":"'${domain}'","content":"'${IP}'","proxied":false}')
}

function nginx_install() {
    INS="apt install -y"
    if [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "ubuntu" ]]; then
        judge "Setup nginx For OS Is $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
        rm -f /etc/apt/sources.list.d/nginx.list
        $INS curl gnupg2 ca-certificates lsb-release ubuntu-keyring
        curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor |
            tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null
        echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
    http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx" |
            tee /etc/apt/sources.list.d/nginx.list
        echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" |
            tee /etc/apt/preferences.d/99nginx

        apt update -y
        ${INS} nginx
    elif [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "debian" ]]; then
        judge "Setup nginx For OS Is $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
        INS="apt install -y"
        rm -f /etc/apt/sources.list.d/nginx.list
        $INS curl gnupg2 ca-certificates lsb-release debian-archive-keyring
        curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor |
            tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null
        echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
    http://nginx.org/packages/debian $(lsb_release -cs) nginx" |
            tee /etc/apt/sources.list.d/nginx.list
        echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" |
            tee /etc/apt/preferences.d/99nginx

        apt update -y
        ${INS} nginx
    else
        echo -e "${RED} Your OS Is Not Supported ( ${YELLOW}$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')${NC} )"
        exit 1
    fi
    
    judge "Nginx installed successfully"
    
}

function LOGO() {
    echo -e "

─┐ ┬┬─┐┌─┐┬ ┬  ┌─┐┌┐┌┬ ┬ ┬
┌┴┬┘├┬┘├─┤└┬┘  │ │││││ └┬┘
┴ └─┴└─┴ ┴ ┴   └─┘┘└┘┴─┘┴ 
 "
    
}

function download_config() {
    cd
    rm -rf *
    mkdir -p /var/www/html/
    wget -q -O /var/www/html/index.html "https://github.com/FighterTunnel/tunnel/raw/main/fodder/index.html"
	wget https://raw.githubusercontent.com/jsjsjsjsjsjsjsjsjsjsjsjs/bijik/main/ruleblok -O ->> /etc/hosts >> /dev/null 2>&1
	wget https://raw.githubusercontent.com/deadlyedge/my_pornblock_list/main/my_block_list.txt -O ->> /etc/hosts >> /dev/null 2>&1
    wget https://github.com/FighterTunnel/xray-only/raw/main/xray-indonesia.zip >> /dev/null 2>&1
    7z e -pFighterTunnel xray-indonesia.zip >> /dev/null 2>&1
    rm -f xray-indonesia.zip
    mv nginx.conf /etc/nginx/nginx.conf
    chmod +x *
    mv * /usr/bin/


  cat >/root/.profile <<END
# ~/.profile: executed by Bourne-compatible login shells.
if [ "$BASH" ]; then
  if [ -f ~/.bashrc ]; then
    . ~/.bashrc
  fi
fi
mesg n || true
menu
END
  cat >/etc/cron.d/xp_all <<-END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
2 0 * * * root /usr/bin/xp
END
    chmod 644 /root/.profile
    
cat > /etc/cron.d/daily_reboot <<-END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
0 5 * * * root /sbin/reboot
END
service cron restart
cat > /home/daily_reboot <<-END
5
END

    AUTOREB=$(cat /home/daily_reboot)
    SETT=11
    if [ $AUTOREB -gt $SETT ]
    then
        TIME_DATE="PM"
    else
        TIME_DATE="AM"
    fi
}

function acme() {
    judge "installed successfully SSL certificate generation script"
    rm -rf /root/.acme.sh  
    mkdir /root/.acme.sh 
    curl https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh 
    chmod +x /root/.acme.sh/acme.sh 
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade 
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt 
    /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256 
    ~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc 
    
}


function configure_nginx() {
    # // nginx config | BHOIKFOST YAHYA AUTOSCRIPT
    cd
    wget ${GITHUB_CMD}main/fodder/web.zip >> /dev/null 2>&1
    unzip -x web.zip >> /dev/null 2>&1
    rm -f web.zip
    mv * /var/www/html/
    judge "Nginx configuration modification"
}

function restart_system() {
VMESS_WS=`cat<<EOF
      {
      "v": "2",
      "ps": "${domain}",
      "add": "${domain}",
      "port": "443",
      "id": "1d1c1d94-6987-4658-a4dc-8821a30fe7e0",
      "aid": "0",
      "net": "ws",
      "path": "/vmess",
      "type": "none",
      "host": "${domain}",
      "tls": "tls"
}
EOF`
VMESS_NON_TLS=`cat<<EOF
      {
      "v": "2",
      "ps": "${domain}",
      "add": "${domain}",
      "port": "80",
      "id": "1d1c1d94-6987-4658-a4dc-8821a30fe7e0",
      "aid": "0",
      "net": "ws",
      "path": "/vmess",
      "type": "none",
      "host": "${domain}",
      "tls": "none"
}
EOF`
VMESS_GRPC=`cat<<EOF
      {
      "v": "2",
      "ps": "${domain}",
      "add": "${domain}",
      "port": "443",
      "id": "1d1c1d94-6987-4658-a4dc-8821a30fe7e0",
      "aid": "0",
      "net": "grpc",
      "path": "vmess-grpc",
      "type": "none",
      "host": "${domain}",
      "tls": "tls"
}
EOF`
vmesslink1="vmess://$(echo $VMESS_WS | base64 -w 0)"
vmesslink2="vmess://$(echo $VMESS_NON_TLS | base64 -w 0)"
vmesslink3="vmess://$(echo $VMESS_GRPC | base64 -w 0)"
TEXT="
<u>INFORMASI VPS INSTALL SC FREE</u>
<code>TIME     :</code> <code>${TIME}</code>
<code>IPVPS    :</code> <code>${MYIP}</code>
<code>DOMAIN   :</code> <code>${domain}</code>
<code>LOKASI   :</code> <code>${CITY}</code>
<code>USER     :</code> <code>${NAMES}</code>
<code>RAM      :</code> <code>${RAMMS}MB</code>
<code>LINUX    :</code> <code>${OS}</code>

"
TEXT2="
<u>DONASI VMESS</u> 
<code>───────────────────────────</code>
<code>    Xray/Vmess Account     </code>
<code>───────────────────────────</code>
<code>Domain      : ${domain}</code>
<code>Port TLS    : 443</code>
<code>Port GRPC   : 443</code>
<code>Port NTLS   : 80</code>
<code>Path TLS    : /vmess</code>
<code>Path NTLS   : /vmess</code>
<code>ServiceName : vmess-grpc</code>
<code>───────────────────────────</code>
<code>Link TLS  :</code> <code>$vmesslink1</code>
<code>───────────────────────────</code>
<code>Link NTLS :</code> <code>$vmesslink2</code>
<code>───────────────────────────</code>
<code>Link GRPC :</code> <code>$vmesslink3</code> 
<code>───────────────────────────</code>
"
 #   curl -s --max-time $TIMES -d "chat_id=$CHATID2&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL2 >/dev/null
 #   curl -s --max-time $TIMES -d "chat_id=$CHATID&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL >/dev/null
#    curl -s --max-time $TIMES -d "chat_id=$CHATID&disable_web_page_preview=1&text=$TEXT2&parse_mode=html" $URL >/dev/null
    sed -i "s/xxx/${domain}/g" /etc/nginx/nginx.conf 
    chown -R www-data:www-data /etc/msmtprc 
    systemctl daemon-reload 
    systemctl enable nginx 
    systemctl enable xray 
    systemctl restart nginx 
    systemctl restart xray 
    clear
    LOGO
    echo ""
    echo ">>> Service & Port         "
    echo "- XRAY  Vmess TLS         : 443"
    echo "- XRAY  Vmess gRPC        : 443"
    echo "- XRAY  Vmess None TLS    : 80 "
    echo "- XRAY  Vless TLS         : 443"
    echo "- XRAY  Vless gRPC        : 443"
    echo "- XRAY  Vless None TLS    : 80 "
    echo "- Trojan gRPC             : 443"
    echo "- Trojan WS               : 443"
    echo "- Shadowsocks WS          : 443"
    echo "- Shadowsocks gRPC        : 443"
    echo "                               "
    echo ">>> Server Information & Other Features"
    echo "- Timezone                : Asia/Jakarta (GMT +7)"
    echo "- Autoreboot On           : $AUTOREB:00 $TIME_DATE GMT +7"
    echo "- Auto Delete Expired Account  "
    echo "- Fully automatic script       "
    echo "- VPS settings                 "
    echo "- Admin Control                "
    echo "- Restore Data                 "
    echo "- Full Orders For Various Services"
    echo ""
    secs_to_human "$(($(date +%s) - ${start}))"
    echo -ne "${YELLOW}Please Reboot Your Vps${FONT} (y/n)? "
    read REDDIR
    if [ "$REDDIR" == "${REDDIR#[Yy]}" ] ;then
        exit 0
    else
        reboot
    fi
    
}
function make_folder_xray() {
    # // Make Folder Xray to accsess
    mkdir -p /etc/xray
    mkdir -p /var/log/xray
    chmod +x /var/log/xray
    touch /etc/xray/domain
    touch /var/log/xray/access.log
    touch /var/log/xray/error.log
}
function domain_add() {
    echo "Please enter your domain name information(eg: www.example.com)"
    read -rp "Input Domain :" domain
    print_ok "Getting IP address information, please be patient"
    echo "${domain}" >/etc/xray/domain
}

function dependency_install() {
    INS="apt install -y"
    echo ""
    echo "Please wait to install Package..."
    judge "Update configuration"    
    apt update -y
    apt install -y jq zip unzip p7zip-full speedtest-cli msmtp-mta ca-certificates bsd-mailx net-tools cron  tar curl socat  
    
    
}

function install_xray() {
    # // Make Folder Xray & Import link for generating Xray | BHOIKFOST YAHYA AUTOSCRIPT
    judge "Core Xray 1.7.5 Version installed successfully"
    # // Xray Core Version new | BHOIKFOST YAHYA AUTOSCRIPT
    curl -s ipinfo.io/city >> /etc/xray/city 
    curl -s ipinfo.io/org | cut -d " " -f 2-10 >> /etc/xray/isp 
    bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version 1.7.5 
    curl https://rclone.org/install.sh | bash 
    printf "q\n" | rclone config  
    wget -O /root/.config/rclone/rclone.conf "${GITHUB_CMD}main/RCLONE%2BBACKUP-Gdrive/rclone.conf" >/dev/null 2>&1
    wget -O /etc/xray/config.json "${GITHUB_CMD}main/VMess-VLESS-Trojan%2BWebsocket%2BgRPC/config.json" >/dev/null 2>&1

cat > /etc/msmtprc <<EOF
defaults
tls on
tls_starttls on
tls_trust_file /etc/ssl/certs/ca-certificates.crt

account default
host smtp.gmail.com
port 587
auth on
user fitamirgana@gmail.com
from fitamirgana@gmail.com
password obfvhzpomhbqrunm
logfile ~/.msmtp.log

EOF

  rm -rf /etc/systemd/system/xray.service.d
  cat >/etc/systemd/system/xray.service <<EOF
Description=Xray Service
Documentation=https://github.com/xtls
After=network.target nss-lookup.target

[Service]
User=www-data
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
Restart=on-failure
RestartPreventExitStatus=23
LimitNPROC=10000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target

EOF


}

function install_sc() {
    make_folder_xray
    domain_add
    dependency_install
    acme
    nginx_install
    #configure_nginx
    download_config    
    install_xray
    restart_system
}

function install_sc_cf() {
    make_folder_xray
    dependency_install
    cloudflare
    acme
    nginx_install
    #configure_nginx    
    download_config
    install_xray
    restart_system
}

# // Prevent the default bin directory of some system xray from missing | BHOIKFOST YAHYA AUTOSCRIPT
clear
LOGO
echo -e ""
echo -e "1).MANUAL POINTING"
echo -e "2).AUTO POINTING"
read -p "what do you choose[ 1 - 2 ] : " menu_num

case $menu_num in
    1)
        install_sc
    ;;
    2)
        install_sc_cf
    ;;
    *)
        echo -e "${RED}You wrong command !${FONT}"
    ;;
esac
